package BinaryTree;

import java.util.LinkedList;
import java.util.Scanner;

class binarytree<T> {
	T data;
	binarytree<T> left;
	binarytree<T> right;

	binarytree(T data) {
		this.data = data;
		left = right = null;
	}
}

public class binarytreeoperators {
	String msg = "root";

	binarytree<Integer> insert() {
		System.out.print("Enter the " + msg + " data");
		int data = new Scanner(System.in).nextInt();
		if (data == -1) {
			return null;
		}
		binarytree<Integer> node = new binarytree<>(data);
		msg = "left";
		node.left = insert();
		msg = "right";
		node.right = insert();
		return node;
	}

	void print(binarytree<Integer> root) {
		if (root == null) {
			return;
		}
		String output = "";
		output += root.data + "=>";
		if (root.left != null) {
			output += "L: " + root.left.data;
		}
		if (root.right != null) {
			output += "R: " + root.right.data;
		}
		System.out.println(output);
		print(root.left);
		print(root.right);
	}

	void preorder(binarytree<Integer> root) {
		if (root == null) {
			return;
		}
		System.out.println(root.data);
		preorder(root.left);
		preorder(root.right);
	}

	void postorder(binarytree<Integer> root) {
		if (root == null) {
			return;
		}
		preorder(root.left);
		preorder(root.right);
		System.out.println(root.data);
	}

	void inorder(binarytree<Integer> root) {
		if (root == null) {
			return;
		}
		preorder(root.left);
		System.out.println(root.data);
		preorder(root.right);
	}

	void levelorder(binarytree<Integer> root) {
		LinkedList<binarytree<Integer>> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			binarytree<Integer> node = queue.removeFirst();
			System.out.print(node.data);
			if (root.left != null) {
				queue.addLast(root.left);
			}
			if (root.right != null) {
				queue.addLast(root.left);
			}

		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		binarytreeoperators obj = new binarytreeoperators();

		binarytree<Integer> root = obj.insert();
		obj.print(root);
	}

}
